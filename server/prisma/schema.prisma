generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  name                String
  cpf                 String                @unique
  email               String                @unique
  password            String
  properties          Property[]
  UserExplorerHistory UserExplorerHistory[]
}

model Property {
  id                  String                @id @default(uuid())
  name                String
  zipcode             String
  state               String
  city                String
  address             String
  price               Float
  propertyType        String
  propertyNumber      Int
  numBedroom          Int
  numBathroom         Int
  description         String
  createdAt           DateTime              @default(now())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  images              Image[]
  Match               Match[]
  UserExplorerHistory UserExplorerHistory[]
  onSale              Boolean               @default(true)
}

model Image {
  id         String   @id @default(uuid())
  imageId    String   @unique
  imageUrl   String   @unique
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Match {
  id          String     @id @default(uuid())
  requesterId String
  receiverId  String
  createdAt   DateTime   @default(now())
  propertyId  String
  property    Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  matchStatus String
  Contract    Contract[]
}

model UserExplorerHistory {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  isLiked    Boolean  @default(false)
}

model Contract {
  id             String   @id @default(uuid())
  matchId        String   @unique
  match          Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  contractType   String
  price          Float
  contractStatus String
  createdAt      DateTime @default(now())
}
